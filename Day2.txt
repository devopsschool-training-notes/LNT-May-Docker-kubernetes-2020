13.235.95.21
================================
13.235.95.21


What is Docker?
Why Docker?
What is Container?
How Docker Works? Architecture?
Docker Workflow?
Docker Components?
Container LifeCycle?
Container Behaviours?
How to consume containers?
===============================
===============================
https://www.devopsschool.com/tutorial/docker/commands


cp
diff
	Changed
	added
	removed
port
rename

 1021  docker run -itd ubuntu
 1022  docker ps
 1023  clear
 1024  ls
 1025  ll
 1026  touch devopsschool.txt
 1027  ls
 1028  docker ps
 1029  docker cp devopsschool.txt a93c94492306:/opt
 1030  docker exec a93c94492306 ls /opt
 1031  rls
 1032  ls
 1033  rm -rf devopsschool.txt
 1034  clear
 1035  ls
 1036  docker cp a93c94492306:/opt/devopsschool.txt .
 1037  ls
 1038  docker ps
 1039  docker diff a93c94492306
 1040  docker ps
 1041  docker attach a93c94492306
 1042  clear
 1043  docker ps
 1044  docker diff a93c94492306
 1045  clear
 1046  ls
 1047  docker ps
 1048  docker port a93c94492306
 1049  docker run -d -p 8080:8080 jenkins
 1050  docker ps
 1051  docker port e747c2e4415c
 1052  clear
 1053  docker ps
 1054  docker rename e747c2e4415c jenkins
 1055  docker ps
 1056  docker run -itd --name raju ubuntu
 1057  docker ps
 1058  history


update	Update configuration of one or more containers
wait	Block until one or more containers stop, then print their exit codes
 - Google.com
 - docker help
 - R & D


logs	Any logs generate by PID 1 executables
ps	List containers
stats	Display a live stream of container(s) resource usage statistics
top	Display the running processes of a container
events	Get real time events from the server

 1061  l
 1062  docker ps
 1063  docker logs e747c2e4415c
 1064  docker ps
 1065  clear
 1066  docker ps
 1067  docker logs 22542b113a86
 1068  docker logs a93c94492306
 1069  docker ps
 1070  clear
 1071  docker ps
 1072  clear
 1073  docker stats
 1074  docker stats 22542b113a86
 1075  docker help run
 1076  clear
 1077  docker run -itd -m 200M ubuntu
 1078  docker stats
 1079  docker stats
 1080  docker ps
 1081  clear
 1082  ls
 1083  ps -eaf | grep docker
 1084  docker ps
 1085  clear
 1086  docker top
 1087  docker ps
 1088  docker top abd8bfa242fa
 1089  clear
 1090  ps -eaf | grep 5383
 1091  ps -eaf | grep 771
 1092* cle
 1093  ps -eaf
 1094  clear
 1095  clear
 1096  ps -eaf | grep docker
 1097  docker ps
 1098  docker top abd8bfa242fa
 1099  clear

 1101  clear
 1102  docker events
 1103  docker events

create|run
		memory		DONE	
		network		
		volume
		port		DONE
		env


Ashwin Atri			52.66.211.181
Arul jobin			15.206.173.9	
Ajay Katke			15.206.82.120
Siddharth Sahoo			13.235.114.174
phani priyank			13.235.27.15
Tanishq Singh			13.233.183.158
Rajesh M			13.127.244.4
Pradeep Thalla			13.234.111.134
Mayank Gwal			13.127.244.94
Gunavadhi A S			15.206.91.127
VINAY N				3.6.36.101
Santhosh P Sonar		13.233.132.87
Jahnavi Manne			13.126.11.201
P.Usha				13.233.54.203	
Hari Krishna Mareedu		13.126.245.37	
Mulayam singh yadav		35.154.235.93	
Amruta Babbannavar		13.232.4.236
Srikanta Pradhan		13.235.17.13
Bhaskar Ganesh			13.235.16.189
MADHUSHREE			13.235.95.21	
=============================================================
Image has one of multiple layers  DONE
Each layer is file system		DONE
Bottom layer is rootfs			DONE
Other layers are changes on top of it 	DONE
Container is nothing but empty and WRITEABLE filesystem

Higher layers always win when there is conflicts in Layers
==
When you create a container and run it ---ALL LAYERS OF Image get merged into ONE Layer (Writeable) and Mounted to USER NAMESPACE...
==============================================================
1218  docker images
 1219  docker history ubuntu
 1220  docker inspect ubuntu

dcoker rmi docker images

/var/lib/docker/overlay2
df -kh
watch ls
du -h
du -s
du -sh
===============================
How to Create Images?
===============================
Method 1  - Using Existing Container



  1  apt-get install git
    2  apt-get update
    3  clear
    4  apt-get install git
    5  git
    6  apt-get install git
    7  git
    8  apt-get install apache
    9  apt-get install apache2
   10  which apache2
   11  which git
   12  service
   13  service start apache2
   14  service apache2 start
   15* ps -eaf | grep apach
   16  service apache2 enable
   17  systemctl enable apache2
   18  apt-get install systemctl
   19  systemctl enable apache2
   20  ps -eaf | grep apache
   21  curl http://localhost
   22  apt-get install curl
   23  curl http://localhost
   24  history



 1242  docker commit -m"git-up-curl-apache-systemctl" -a"rajesh Kumar" 84b731f9917c git-up-curl-apache-systemctl
 1243  docker images
 1244  docker history ubuntu
 1245  docker history git-up-curl-apache-systemctl
 1246  clear
 1247  docker images
 1248  docker run -itd git-up-curl-apache-systemctl
 1249  docker ps
 1250  docker inspect git-up-curl-apache-systemctl
 1251  clear
 1252  docker ps
 1253  docker inspect 003071a3fdf7
 1254  clear
 1255  curl http://172.17.0.3
 1256  docker [s
 1257  clear
 1258  docker ps
 1259  docker attach 003071a3fdf7


How to Share a Images?
===========================
- Using Tar Ball

1264  docker images
 1265  docker save -o git-up-curl-apache-systemctl.tar git-up-curl-apache-systemctl
 1266  ls
 1267  docker ps -a
 1268  docker stop 003071a3fdf7 84b731f9917c
 1269  clear
 1270  docker rm  003071a3fdf7 84b731f9917c
 1271  cleatr
 1272  clear
 1273  docker images
 1274  docker rmi git-up-curl-apache-systemctl
 1275  docker images
 1276  ls
 1277  docker load -i git-up-curl-apache-systemctl.tar
 1278  docker images
 1279  history


- Using Public Registry
Step -1 - Register to hub.docker.com
Step - 2 - Validation and Login
Step 3 - Create a repo
Step 4 - Local Image rename to match a repo of docker hub.com
Step 5 - docker login
Step 6 - docker push 


 1281  docker images
 1282  docker tag git-up-curl-apache-systemctl devopsschools/lnmay2020
 1283  docker images
 1284  cler
 1285  clear
 1286  docker login
 1287  w
 1288  clear
 1289  who
 1290  clear
 1291  docker logout
 1292  docker login
 1293  docker login
 1294  docker images
 1295  docker push devopsschools/lnmay2020


- Using Private Registry


Method 2 - Using Dockerfile
=========================================

INTRUCTIONS	PARAM

FROM ubuntu
MAINTAINER Rajesh Kumar Devops@rajeshkumar.xyz
RUN apt-get update
RUN apt-get install git -y
#RUN apt-get install apache2 -y fdfsdfdfsdfsd
RUN apt-get install
COPY index.html /var/www/html
ENV MY_VAR RAJESHKUMAR

=================================
RULES of Dockerfile
- EVERY LINE of Dockerfile create one LAYER
- EACH LAYER get created based on FROM

FROM ubuntu
MAINTAINER Rajesh Kumar Devops@rajeshkumar.xyz
RUN touch /opt/rajesh1.txt
RUN touch /opt/rajesh2.txt
RUN touch /opt/rajesh3.txt


====================================
docker build -t nameoftheimage .

docker build -t nameoftheimage -f docfile .

docker run -d -p 8080:8080 -p 50000:50000 jenkins

docker run -d -P jenkins

# for main web interface:
EXPOSE ${http_port}

# will be used by attached slave agents:
EXPOSE ${agent_port}
================================================
How to make/set PID 1??

CMD
or
ENTRYPOINT
or
BOTH


CMD Vs ENTRYPOINT
===========================
CMD 
		CAN BE CHANGED DURING RUN TIME.
ENTRYPOINT
		CAN NOT BE CHANGED DURING RUN TIME.

When you provide CMD to ENTRYPOINT
			$ ENTRYPOINT CMD 

	
	
	/bin/tini -- /usr/local/bin/jenkins.sh
	docker run jenkins ls
	/bin/tini -- /usr/local/bin/jenkins.sh ls
===============================================

aSSIGNMENT
https://www.devopsschool.com/tutorial/docker/dockerfile/dockerfile-example-sample-lab.html

