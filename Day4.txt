Master
	API Server --> POD -> Container(S) -> Image --> Google Registry ->
	Clustor Store ETCD --> POD -> Container(S) -> Image --> Google Registry ->
	Schedular --> POD -> Container(S) -> Image --> Google Registry ->
	Controller--> POD -> Container(S) -> Image --> Google Registry ->
	
	kubelet		
	Container Engine	
	Kube Proxy --> POD -> Container(S) -> Image --> Google Registry ->
Worker
	kubelet	
	Container Engine
	Kube Proxy --> POD -> Container(S) -> Image --> Google Registry ->
Workstation
	Kubectl

Desire --> Declare in YAML
==============================
POD -> Container(S) -> Image --> Registry ->
Replication Controller 
Deployment
Services
	

Single Node Clustor
==============================
- minikube
https://www.devopsschool.com/tutorial/kubernetes/minikube-installation-procedures.html
https://www.devopsschool.com/tutorial/kubernetes/minikube-commands-reference.html
https://www.devopsschool.com/videos/593/kubernetes-advance-tutorial-for-beginners-with-demo-2020-minikube-part-01-by-devopsschool/
https://www.devopsschool.com/videos/464/kubernetes-advance-tutorial-for-beginners-with-demo-2020-minikube-part-02-by-devopsschool/

Hardway
==============================
https://github.com/kelseyhightower/kubernetes-the-hard-way

Manual Way
==============================
Kubeadm [OFFICIAL WAY]

Managed Clustor to Cloud Providor
=============================
AWS 	-> EKS
Google  -> GKE
Azure	-> AKS

YOU WANT TO MANAGE YOUR OWN CLUSTOR BUT Integration with CLOUD SERVICES
================
KOPS
https://github.com/kubernetes/kops
https://www.devopsschool.com/videos/show/kops?type=video

Manual Way
==============================
Kubeadm [OFFICIAL WAY]
===================================================
https://www.devopsschool.com/blog/setting-up-kubernetes-clusters-using-kubeadm-manual-way-in-rhel-7-centos7/
13.233.116.86


To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/
##### kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"


Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.31.15.187:6443 --token 3yh47f.wi7qj1g5pqv6ptvf \
    --discovery-token-ca-cert-hash sha256:b092c23e10acd1f0a0cd3e1fe1cd3aff0931d5a7d629a3d6b11d9c04aa973465


======================================================

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config
====================================================
Setting up a Workstation

kubectl	--> config
		$HOME/.kube/config
		CURR_DIR/.kube/config


		config
			YAML FORMAT
			CLUSTOR(S)	
				CLUSTOR1 - API SERVER Addresss
				CLUSTOR2 - API SERVER Addresss
				CLUSTOR3 - API SERVER Addresss
			USER(S)
				USER 1 - Certificates
				USER 2 - Certificates
				USER 3 - Certificates
			Context(S)
				Context 1 = CLUSTOR1 + USER 3
				Context 2 = CLUSTOR2 + USER 1	
				Context 3 = CLUSTOR3 + USER 2
			CURR-CONTEXT
				Context 1 OR Context 2 OR Context 3

				API SERVER Addresss
				USER
				Certificates
=================================================================================
How to verify if Master is in Healthy?

[ec2-user@ip-172-31-15-187 ~]$ kubectl
kubectl controls the Kubernetes cluster manager.

 Find more information at: https://kubernetes.io/docs/reference/kubectl/overview/

Basic Commands (Beginner):
  create        Create a resource from a file or from stdin.
  expose        Take a replication controller, service, deployment or pod and expose it as a new
Kubernetes Service
  run           Run a particular image on the cluster
  set           Set specific features on objects

Basic Commands (Intermediate):
  explain       Documentation of resources
  get           Display one or many resources
  edit          Edit a resource on the server
  delete        Delete resources by filenames, stdin, resources and names, or by resources and label
selector

Deploy Commands:
  rollout       Manage the rollout of a resource
  scale         Set a new size for a Deployment, ReplicaSet or Replication Controller
  autoscale     Auto-scale a Deployment, ReplicaSet, or ReplicationController

Cluster Management Commands:
  certificate   Modify certificate resources.
  cluster-info  Display cluster info
  top           Display Resource (CPU/Memory/Storage) usage.
  cordon        Mark node as unschedulable
  uncordon      Mark node as schedulable
  drain         Drain node in preparation for maintenance
  taint         Update the taints on one or more nodes

Troubleshooting and Debugging Commands:
  describe      Show details of a specific resource or group of resources
  logs          Print the logs for a container in a pod
  attach        Attach to a running container
  exec          Execute a command in a container
  port-forward  Forward one or more local ports to a pod
  proxy         Run a proxy to the Kubernetes API server
  cp            Copy files and directories to and from containers.
  auth          Inspect authorization

Advanced Commands:
  diff          Diff live version against would-be applied version
  apply         Apply a configuration to a resource by filename or stdin
  patch         Update field(s) of a resource using strategic merge patch
  replace       Replace a resource by filename or stdin
  wait          Experimental: Wait for a specific condition on one or many resources.
  convert       Convert config files between different API versions
  kustomize     Build a kustomization target from a directory or a remote url.

Settings Commands:
  label         Update the labels on a resource
  annotate      Update the annotations on a resource
  completion    Output shell completion code for the specified shell (bash or zsh)

Other Commands:
  alpha         Commands for features in alpha
  api-resources Print the supported API resources on the server
  api-versions  Print the supported API versions on the server, in the form of "group/version"
  config        Modify kubeconfig files
  plugin        Provides utilities for interacting with plugins.
  version       Print the client and server version information

Usage:
  kubectl [flags] [options]

Use "kubectl <command> --help" for more information about a given command.
Use "kubectl options" for a list of global command-line options (applies to all commands).
[ec2-user@ip-172-31-15-187 ~]$



=======================================
Setting up a worker
===========================
35.154.202.72
13.235.87.234


Desire --> Declare in YAML
==============================
POD -> Container(S) -> Image --> Registry ->
Replication Controller 
Deployment
Services

======================================================
START POINT
=======================================================

 9  kubectl cluster-info
   10  clear
   11  kubectl et
   12  kubectl get
   13  kubectl -h
   14  kubectl get -h
   15  clear
   16  kubectl get -h
   17  clear
   18  kubectl get pods
   19  kubectl get pods --all-namespaces
   20  kubectl get nodes
   23  kubectl get nodes
   24  kubectl get pods --all-namespaces
   25  clear
   26  kubectl get nodes
   27  kubectl get pods
   28  clear
   29  kubectl get ns
   30  kubectl get pods -n=kube-system
   31  history

   33  kubectl api-resources
   34  kubectl api-resources | wc -l
   35  clear
   36  kubectl api-resources
   37  clear
   38  kubectl api-versions



NAME                              SHORTNAMES   APIGROUP                       NAMESPACED   KIND
bindings                                                                      true         Binding
componentstatuses                 cs                                          false        ComponentStatus
configmaps                        cm                                          true         ConfigMap
endpoints                         ep                                          true         Endpoints
events                            ev                                          true         Event
limitranges                       limits                                      true         LimitRange
namespaces                        ns                                          false        Namespace
nodes                             no                                          false        Node
persistentvolumeclaims            pvc                                         true         PersistentVolumeClaim
persistentvolumes                 pv                                          false        PersistentVolume
pods                              po                                          true         Pod
podtemplates                                                                  true         PodTemplate
replicationcontrollers            rc                                          true         ReplicationController
resourcequotas                    quota                                       true         ResourceQuota
secrets                                                                       true         Secret
serviceaccounts                   sa                                          true         ServiceAccount
services                          svc                                         true         Service
mutatingwebhookconfigurations                  admissionregistration.k8s.io   false        MutatingWebhookConfiguration
validatingwebhookconfigurations                admissionregistration.k8s.io   false        ValidatingWebhookConfiguration
customresourcedefinitions         crd,crds     apiextensions.k8s.io           false        CustomResourceDefinition
apiservices                                    apiregistration.k8s.io         false        APIService
controllerrevisions                            apps                           true         ControllerRevision
daemonsets                        ds           apps                           true         DaemonSet
deployments                       deploy       apps                           true         Deployment
replicasets                       rs           apps                           true         ReplicaSet
statefulsets                      sts          apps                           true         StatefulSet
tokenreviews                                   authentication.k8s.io          false        TokenReview
localsubjectaccessreviews                      authorization.k8s.io           true         LocalSubjectAccessReview
selfsubjectaccessreviews                       authorization.k8s.io           false        SelfSubjectAccessReview
selfsubjectrulesreviews                        authorization.k8s.io           false        SelfSubjectRulesReview
subjectaccessreviews                           authorization.k8s.io           false        SubjectAccessReview
horizontalpodautoscalers          hpa          autoscaling                    true         HorizontalPodAutoscaler
cronjobs                          cj           batch                          true         CronJob
jobs                                           batch                          true         Job
certificatesigningrequests        csr          certificates.k8s.io            false        CertificateSigningRequest
leases                                         coordination.k8s.io            true         Lease
endpointslices                                 discovery.k8s.io               true         EndpointSlice
events                            ev           events.k8s.io                  true         Event
ingresses                         ing          extensions                     true         Ingress
ingressclasses                                 networking.k8s.io              false        IngressClass
ingresses                         ing          networking.k8s.io              true         Ingress
networkpolicies                   netpol       networking.k8s.io              true         NetworkPolicy
runtimeclasses                                 node.k8s.io                    false        RuntimeClass
poddisruptionbudgets              pdb          policy                         true         PodDisruptionBudget
podsecuritypolicies               psp          policy                         false        PodSecurityPolicy
clusterrolebindings                            rbac.authorization.k8s.io      false        ClusterRoleBinding
clusterroles                                   rbac.authorization.k8s.io      false        ClusterRole
rolebindings                                   rbac.authorization.k8s.io      true         RoleBinding
roles                                          rbac.authorization.k8s.io      true         Role
priorityclasses                   pc           scheduling.k8s.io              false        PriorityClass
csidrivers                                     storage.k8s.io                 false        CSIDriver
csinodes                                       storage.k8s.io                 false        CSINode
storageclasses                    sc           storage.k8s.io                 false        StorageClass
volumeattachments                              storage.k8s.io                 false        VolumeAttachment

[ec2-user@ip-172-31-15-187 ~]$ kubectl api-versions
admissionregistration.k8s.io/v1
admissionregistration.k8s.io/v1beta1
apiextensions.k8s.io/v1
apiextensions.k8s.io/v1beta1
apiregistration.k8s.io/v1
apiregistration.k8s.io/v1beta1
apps/v1
authentication.k8s.io/v1
authentication.k8s.io/v1beta1
authorization.k8s.io/v1
authorization.k8s.io/v1beta1
autoscaling/v1
autoscaling/v2beta1
autoscaling/v2beta2
batch/v1
batch/v1beta1
certificates.k8s.io/v1beta1
coordination.k8s.io/v1
coordination.k8s.io/v1beta1
discovery.k8s.io/v1beta1
events.k8s.io/v1beta1
extensions/v1beta1
networking.k8s.io/v1
networking.k8s.io/v1beta1
node.k8s.io/v1beta1
policy/v1beta1
rbac.authorization.k8s.io/v1
rbac.authorization.k8s.io/v1beta1
scheduling.k8s.io/v1
scheduling.k8s.io/v1beta1
storage.k8s.io/v1
storage.k8s.io/v1beta1
v1


EACH API OBJECT HAS 4 METHOD
	----- CRUD
	
	Create
		CMD
			create
		YAML
			create
	Read
		CMD
			get
	Update
		CMD
			edit
		YAML
			apply
	Delete
		CMD
			delete
		YAML
			delete

============================================
  108  kubectl get ns
  109  kubectl create ns dev
  110  kubectl get ns
  111  kubectl edit ns dev
  112  kubectl delete ns dev



POD -> Container -> Image -> Registry
====================
apiVersion: v1
kind: Pod
metadata:
  name: hello-pod
  labels: 
    app: webserver
spec:
  containers:
  - name: hello-ctr
    image: nginx
    ports:
    - containerPort: 80

  112  kubectl delete ns dev
  113  history
  114  clear
  115  kubectl create -h
  116  clear
  117  ls
  118  lear
  119  l
  120  clear
  121  ls
  122  cd
  123  ls
  124  PWD
  125  pwd
  126  mkdir rajesh
  127  cd rajesh/
  128  ls
  129  pwd
  130  vi pod.yaml
  131  pwd
  132  kubectl get ns
  133  kubectl create ns rajesh
  134  kubectl get ns
  135  clear
  136  ls
  137  kubectl create -f pod.yaml -n=rajesh
  138  kubectl create -f pod.yaml
  139  kubectl get pods
  140  kubectl get pods -n=rajesh
  141  kubectl edit pod hello-pod  -n=rajesh
  142  kubectl get pods -n=rajesh
  143  kubectl get pods -n=rajesh --show-labels
  144  kubectl get pods -n=rajesh --show-labeles -o wide
  145  kubectl get pods -n=rajesh-o wide
  146  kubectl get pods -n=rajesh -o wide
  147  curl http://10.44.0.1
  148  clear
  149  vi pod.yaml
  150  kubectl apply -f pod.yaml -n=rajesh
  151  kubectl get pods -n=rajesh --show-labeles
  152  kubectl get pods -n=rajesh --show-labels
  153  kubectl delete -f pod.yaml -n=rajesh
  154  history

============================
WORKSTATION - 13.233.116.86
User - ec2-user

=======================================
how to show all the fields of all objects

 169  clear
  170  kubectl explain pods
  171  kubectl explain pods.spec
  172  kubectl explain pods.spec.containers

=======================================
How to use PODS?


 166  kubectl get pods -n=rajesh
  167  clear
  168  kubectl
  169  clear
  170  kubectl explain pods
  171  kubectl explain pods.spec
  172  kubectl explain pods.spec.containers
  173  history
  174  clear
  175  kubectl get pods -n=rajesh
  176  kubectl get pods -n=rajesh -o wide
  177  curl http://10.44.0.12
  178  clear
  179  kubectl get pods -n=rajesh
  180  kubectl logs hello-pod  -n=rajesh
  181  curl http://10.44.0.12
  182  clear
  183  kubectl logs hello-pod  -n=rajesh
  184  kubectl exec -it hello-pod /bin/bash
  185  clear
  186  kubectl exec -it hello-pod /bin/bash -n=rajesh
  187  kubectl attach hello-pod  -n=rajesh
  188  clear
  189  kubectl
  190  clear
  191  kubectl describe pod hello-pod -n=rajesh
  192  kubectl
  193  clear
  194  ls
  195  kubectl cp -h
  196  clear
  197  ls
  198  touch devopsschool.txt
  199  kubectl cp devopsschool.txt hello-pod:/opt
  200  kubectl cp devopsschool.txt hello-pod:/opt -n=rajesh
  201  kubectl exec hello-pod ls /opt -n=rajesh


=======================================
ReplicationController
=============================
Image
scmgalaxy/nginx-devopsschoolv1
scmgalaxy/nginx-devopsschoolv2


apiVersion: v1
kind: ReplicationController
metadata:
  name: hello-rc
spec:
  replicas: 2   
  template:
    metadata:
      labels:
        app: hello-world
    spec:
      containers:
      - name: hello-ctr
        image: scmgalaxy/nginx-devopsschoolv1
        ports:
        - containerPort: 80


Replication  --> ONE POD TO MANY
 219  kubectl create -f rc.yaml -n=rajesh
  220  kubectl get rc -n=rajesh
  221  kubectl get pods -n=rajesh
  222* vi rc.yaml
  223  kubectl apply -f rc.yaml -n=rajesh
  224  kubectl get pods -n=rajesh
  225  clear
  226  kubectl get pods -n=rajesh
  227  clear
  228  kubectl get pods -n=rajesh
  229  clear
  230  kubectl get pods -n=rajesh
  231  kubectl edit rc hello-rc -n=rajesh
  232  kubectl get pods -n=rajesh
  233  clear
  234  kubectl get pods -n=rajesh


Controller --> DESIRE NUMBER MUST BE ACtUAL NUM


  237  kubectl get pods -n=rajesh
  238  kubectl delete pod hello-rc-qr5rp -n=rajesh
  239  kubectl get pods -n=rajesh
  240  history
====================================================================
Deployment
	Replication
	Controller
	versioning
	Rollout
	Rollback


  267  kubectl create -h
  268  clear
  269  kubectl create deployment -h


kubectl create deployment my-dep --image=scmgalaxy/nginx-devopsschoolv1
kubectl scale --replicas=5 deployment/my-dep

267  kubectl create -h
  268  clear
  269  kubectl create deployment -h
  270  history
  271  clear
  272  kubectl create deployment my-dep --image=scmgalaxy/nginx-devopsschoolv1
  273  kubectl create deployment my-dep --image=scmgalaxy/nginx-devopsschoolv1 -n=rajesh
  274  kubectl get pods -n=rajesh
  275  kubectl delete rc hello-rc
  276  kubectl delete rc hello-rc -n=rajesh
  277  kubectl delete pod hello-pod -n=rajesh
  278  kubectl get pods -n=rajesh
  279  clear
  280  kubectl edit deploy my-dep -n=rajesh
  281  kubectl get pods -n=rajesh
  282  kubectl
  283  clear
  284  kubectl scale -h
  285  clear
  286  kubectl get pods -n=rajesh
  287  kubectl scale --replicas=5 deployment/my-dep
  288  kubectl get pods -n=rajesh
  289  kubectl scale --replicas=5 deployment/my-dep -n=rajesh
  290  kubectl get pods -n=rajesh
  291  clear
  292  ls
  293  cd rajesh/
  294  ls
  295  kubectl get deploy -n=rajesh
  296  kubectl get deploy -o yaml -n=rajesh
  297  kubectl get deploy -o yaml --export -n=rajesh
  298  clear
  299  kubectl get deploy -o yaml --export -n=rajesh >> dep1.yaml
  300  ls
  301  more dep1.yaml
  302  vi dep1.yaml
  303  clear
  304  ls
  305  kubectl get deploy -n=rajesh
  306  kubectl apply -f dep1.yaml
  307  kubectl get deploy -n=rajesh
  311  kubectl get pod -n=rajesh
  312  kubectl delete pod my-dep-76767c79f-2fwfp my-dep-76767c79f-2lsbq -n=rajesh
  313  kubectl get pod -n=rajesh
  314  clear
  315  ls
  316  kubectl get pod -n=rajesh -o wide
  317  clear
  318  kubectl
  319  clear
  320  kubectl rollout -h
  321  history
  322  kubectl rollout -h


Available Commands:
  history     View rollout history
  pause       Mark the provided resource as paused
  restart     Restart a resource
  resume      Resume a paused resource
  status      Show the status of the rollout
  undo        Undo a previous rollout

--------------------------------------------------
kubectl rollout history deploy my-dep -n=rajesh
kubectl rollout status deploy my-dep -n=rajesh
  362  kubectl get pods -n=rajesh
  363  kubectl get pods -n=rajesh -o wide
  364  curl http://10.47.0.8
# rollout scmgalaxy/nginx-devopsschoolv2
kubectl edit deploy my-dep -n=rajesh
# kubectl scale --replicas=50 deployment/my-dep -n=rajesh
kubectl rollout pause deploy my-dep -n=rajesh
kubectl rollout status deploy my-dep -n=rajesh
kubectl rollout resume deploy my-dep -n=rajesh
kubectl rollout restart deploy my-dep -n=rajesh
kubectl rollout status deploy my-dep -n=rajesh
kubectl rollout history deploy my-dep -n=rajesh
kubectl rollout undo deploy my-dep --to-revision=1 -n=rajesh
--------------------------------------------------



 323  history
  324  kubectl rollout history deploy my-dep
  325  kubectl rollout status deploy my-dep
  326  clear
  327  kubectl get pods --all-namespaces | wc -l
  328  kubectl get pods --all-namespaces
  329  clear
  330  kubectl get pods --all-namespaces
  331* kubectl get pods --all-namespaces
  332  kubectl get pods --all-namespaces | wc -l
  333  clear
  334  ls
  335  kubectl get pods --all-namespaces | wc -l
  336  kubectl get pods --all-namespaces
  337  kubectl get pods --all-namespaces | wc -l
  338  kubectl get rc
  339  kubectl get deploy
  340  kubectl delete deploy my-dep
  341  kubectl get deploy
  342  kubectl get deploy -n=usah
  343  kubectl get deploy -n=uha
  344  kubectl get deploy -n=usha
  345  kubectl get rc -n=usha
  346  kubectl delete rc hello-rc -n=usha
  347  kubectl get rc -n=usha
  348  kubectl get pods --all-namespaces | wc -l
  349  kubectl get pods --all-namespaces
  350  kubectl get rc -n=tanishq
  351  kubectl delete rc nginx -n=tanishq
  352  kubectl get rc -n=tanishq
  353  clear
  354  ls
  355  kubectl rollout history deploy my-dep -n=rajesh
  356  kubectl rollout status deploy my-dep -n=rajesh
  357  ls
  358  kubectl edit deploy my-dep -n=rajesh
  359  kubectl get pods -n=rajesh
  360  kubectl delete deploy my-dep2 -n=rajesh
  361  clear
  362  kubectl get pods -n=rajesh
  363  kubectl get pods -n=rajesh -o wide
  364  curl http://10.47.0.8
  365  history
  366  kubectl edit deploy my-dep -n=rajesh
  367  kubectl rollout status deploy my-dep -n=rajesh
  368  kubectl rollout history deploy my-dep -n=rajesh
  369  kubectl scale --replicas=50 deployment/my-dep -n=rajesh
  370  kubectl rollout status deploy my-dep -n=rajesh
  371  kubectl rollout pause deploy my-dep -n=rajesh
  372  kubectl rollout status deploy my-dep -n=rajesh
  373  kubectl rollout restart deploy my-dep -n=rajesh
  374  kubectl rollout resume deploy my-dep -n=rajesh
  375  kubectl rollout restart deploy my-dep -n=rajesh
  376  kubectl rollout status deploy my-dep -n=rajesh
  377  clear
  378  ls
  379  kubectl get deploy -n=rajesh
  380  kubectl rollout history deploy my-dep -n=rajesh
  381  kubectl get pods -n=rajesh
  382  kubectl get pods -n=rajesh -o wide
  383  curl http://10.44.0.47
  384  clear
  385  ls
  386  kubectl get pods --all-namespaces | wc -l
  387  curl http://10.44.0.47
  388  kubectl rollout history deploy my-dep -n=rajesh
  389  kubectl rollout undo -h
  390  clear
  391  kubectl rollout undo deploy my-dep --to-revision=1
  392  kubectl rollout undo deploy my-dep --to-revision=1 -n=rajesh
  393  kubectl rollout status deploy my-dep -n=rajesh
  394  kubectl get pods -n=rajesh
  395  kubectl get pods -n=rajesh -o wide
  396  curl http://10.47.0.17
  397  kubectl get pods -n=rajesh
  398  kubectl delete deploy my-dep -n=rajesh
  399  kubectl get pods -n=rajesh
  400  clear
  401  kubectl get pods -n=rajesh
  402  clear
  403  kubectl get pods -n=rajesh
  404  history







